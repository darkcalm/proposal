---
description: 
globs: 
alwaysApply: false
---
# Rule: Generating a Task List from a PRD

## Goal

To guide an AI assistant in creating a detailed, step-by-step task list in Markdown format based on an existing Product Requirements Document (PRD). The task list should guide a developer through implementation.

_Note: In this specific project, the document serving as the PRD is `docs/1.2.3-project-charter.md`._

## Output

- **Format:** Markdown (`.md`)
- **Location:** `/tasks/`
- **Filename:** `tasks-[prd-file-name].md` (e.g., `tasks-research-proposal.md`)

## Process

1. **Receive PRD Reference:** The user points the AI to a specific PRD file
2. **Analyze PRD:** The AI reads and analyzes the functional requirements, user stories, and other sections of the specified PRD.
3. **Phase 1: Generate Parent Tasks:** Based on the PRD analysis, create the file and generate the main, high-level tasks required to implement the feature. Use your judgement on how many high-level tasks to use. It's likely to be about 5. Present these tasks to the user in the specified format (without sub-tasks yet). Inform the user: "I have generated the high-level tasks based on the PRD. Ready to generate the sub-tasks? Respond with 'Go' to proceed."
4. **Wait for Confirmation:** Pause and wait for the user to respond with "Go".
5. **Phase 2: Generate Sub-Tasks:** Once the user confirms, break down each parent task into smaller, actionable sub-tasks necessary to complete the parent task. Ensure sub-tasks logically follow from the parent task and cover the implementation details implied by the PRD.
6. **Identify Deliverables:** Based on the tasks and PRD, identify all deliverables that will be produced. List these under the `Deliverables` section. Denote the tasks that generates the deliverable with `(Deliverable)`
7. **Generate Final Output:** Combine the parent tasks, sub-tasks, and deliverables into the final Markdown structure.
8. **Save Task List:** Save the generated document in the `/tasks/` directory with the filename `tasks-[prd-file-name].md`.

## Output Format

The generated task list _must_ follow this structure:

```markdown
## Deliverables

- `deliverables/path/to/file1.tex` - Description of deliverable 1
- `deliverables/path/to/file2.tex` - Description of deliverable 2
- `deliverables/path/to/file3.tex` - Description of deliverable 3

## Tasks (refer to @.cursor/rules/process-task-list before executing)

- [ ] 1.0 Parent Task Title
  - [ ] 1.1 [Sub-task description 1.1]
    - [ ] 1.1.1 [Detailed sub-task 1.1.1]
    - [ ] 1.1.2 [Detailed sub-task 1.1.2]
  - [ ] 1.2 [Sub-task description 1.2]
- [ ] 2.0 Parent Task Title
  - [ ] 2.1 [Sub-task description 2.1]
- [ ] 3.0 Parent Task Title (Deliverable)
```

## Task Numbering Convention

- Use X.Y.Z format where:
  - X: Major task phase (1.0, 2.0, etc.)
  - Y: Sub-task within phase (1.1, 1.2, etc.)
  - Z: Detailed sub-task (1.1.1, 1.1.2, etc.)
- Dependencies follow recency pattern:
  - Task X.Y.Z depends on X.Y.Z-1, X.Y.Z-2, etc.
  - Then X.Y-1.*, X.Y-2.*, etc.
  - Only check earlier dependencies if context is insufficient

## Quality Assurance

- Each task must be verifiable and complete
- Dependencies must be clearly traceable
- Task numbering must follow logical sequence
- All deliverables must be properly referenced
- Task completion must be measurable

## Interaction Model

The process explicitly requires a pause after generating parent tasks to get user confirmation ("Go") before proceeding to generate the detailed sub-tasks. This ensures the high-level plan aligns with user expectations before diving into details.

## Target Audience

Assume the primary reader of the task list is a **junior developer** who will implement the feature.
